buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()

		//Cargo
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

		//Cargo
		classpath 'com.bmuschko:gradle-cargo-plugin:2.6.1'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

//Cargo
apply plugin: 'com.bmuschko.cargo'
def cargoVersion = '1.7.3'

group = 'com.sergey.didenko.spring'
version = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildDir = 'build'
allprojects {
	idea {
		module {
			outputDir file("$buildDir/classes/main")
			testOutputDir file("$buildDir/classes/test")
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	providedRuntime
}

dependencies {
	//[Spring] Web -> @RestController, @RequestMapping,...
	implementation('org.springframework.boot:spring-boot-starter-web') {
		//TODO : For WildFly server only
		//exclude module: "spring-boot-starter-tomcat"
	}
	//TODO : For WildFly server only
	//TODO : When starter-tomcat excluded, provide for bootRun
	//providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')

	//[Spring] JPA Repository for DB
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

	//[Spring] Security
	//implementation('org.springframework.boot:spring-boot-starter-security')

    //[Spring] other modules
	//implementation('org.springframework.session:spring-session-core')
	//implementation('org.springframework.boot:spring-boot-starter-mail')
	//implementation('org.springframework.boot:spring-boot-starter-quartz')
	
	//[DB] migration utils
	implementation('org.liquibase:liquibase-core')

	//[DB] MySQLConnector
	compile 'mysql:mysql-connector-java:8.0.13'

	//[DB] PostgreSQL
	//compile('org.postgresql:postgresql')

    //[Test] utils
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testCompile "junit:junit"

	//Cargo
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
	cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

wrapper {
	distributionUrl="https://services.gradle.org/distributions/gradle-5.0-all.zip"
}

ext {
	remoteHost = project.hasProperty('rh') ? project.property('rh') : 'localhost'
	remoteUser = project.hasProperty('ru') ? project.property('ru') : 'admin'
	remotePassword = project.hasProperty('rp') ? project.property('rp') : 'admin'
}

//Cargo tasks (do build first):
// [Remote]
//  * cargoRedeployRemote
//  * cargoDeployRemote
//  * cargoUndeployRemote
// [Local]
//  * cargoRunLocal			//waits for the user to press CTRL + C to stop
//  * cargoConfigureLocal
// [Local] As container
//  * cargoStartLocal		//start container, deploy
//  * cargoRedeployLocal	//redeploy to running container
//  * cargoStopLocal		//stop container
cargo {
	/**
	 * TODO : Tomcat container
	 * ./conf/server.xml, in <Server> tag
	 * <Connector port="8088" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />
	 */
	containerId = 'tomcat8x'
	//TODO : Remote port
	//port = 8088
	//TODO : Local port
	port = 9080

	/**
	 * TODO : Wildfly server
	 * [org.jboss.as] (Controller Boot Thread) WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
	 */
	//containerId = 'wildfly14x'
	//TODO : Remote port
	//port = 9990

	/**
	 * TODO : Remote settings
	 */
	remote {
		hostname = "$remoteHost"
		username = "$remoteUser"
		password = "$remotePassword"
	}

	/**
	 * TODO : Local settings for Tomcat
	 */
	local {
		installer {
			installUrl = 'http://repo1.maven.org/maven2/org/apache/tomcat/tomcat/8.5.37/tomcat-8.5.37.zip'
			downloadDir = file("$buildDir/download")
			extractDir = file("$buildDir")
		}
		
		logLevel = 'low'
		outputFile = file("$buildDir/tomcat-output.log")
		logFile = file("$buildDir/cargo-output.log")
	}

	/**
	 * TODO : Each war == each deployable block
	 */
	deployable {
		file = file("$buildDir/libs/build-cargo-embedded.war")
		context = 'build-cargo-embedded'
	}
}