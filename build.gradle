buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()

		//Cargo
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

		//Cargo
		classpath 'com.bmuschko:gradle-cargo-plugin:2.6.1'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

//Cargo
apply plugin: 'com.bmuschko.cargo'
def cargoVersion = '1.7.3'

group = 'com.sergey.didenko.spring'
version = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildDir = 'build'
allprojects {
	idea {
		module {
			outputDir file("$buildDir/classes/main")
			testOutputDir file("$buildDir/classes/test")
		}
	}
}

repositories {
	mavenCentral()
}

configurations {
	providedRuntime

	//If deploy - exclude embedded tomcat from SpringBoot
	if (project.hasProperty('cp')) {
		implementation.exclude module: "spring-boot-starter-tomcat"
	}
}

dependencies {
	//[Spring] Web -> @RestController, @RequestMapping,...
	implementation('org.springframework.boot:spring-boot-starter-web')

	//[Spring] JPA Repository for DB
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

	//[Spring] Security
	//implementation('org.springframework.boot:spring-boot-starter-security')

    //[Spring] other modules
	//implementation('org.springframework.session:spring-session-core')
	//implementation('org.springframework.boot:spring-boot-starter-mail')
	//implementation('org.springframework.boot:spring-boot-starter-quartz')
	
	//[DB] migration utils
	implementation('org.liquibase:liquibase-core')

	//[DB] MySQLConnector
	compile 'mysql:mysql-connector-java:8.0.13'

	//[DB] PostgreSQL
	//compile('org.postgresql:postgresql')

    //[Test] utils
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testCompile "junit:junit"

	//Cargo
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
	cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

wrapper {
	distributionUrl="https://services.gradle.org/distributions/gradle-5.0-all.zip"
}

/**
 * TODO : Cargo properties:
 * 
 * cp	=> cargo profile (rWildfly, rTomcat, ldTomcat, leTomcat)
 * ccp	=> cargo container port
 * crh	=> cargo remote host
 * cru	=> cargo remote user
 * crp 	=> cargo remote password
 * 
 * cajp	=> tomcat.ajp.port property (only in Tomcat profiles)
 * 
 * TODO : Cargo build configurations:
 * 
 * Local Embedded Tomcat
 * bash ./gradlew bootWar cargoRunLocal -Pcp="leTomcat"
 * -Pccp="9080" -Pcajp="9081"
 * 
 * Local Download Tomcat
 * bash ./gradlew bootWar cargoRunLocal -Pcp="ldTomcat"
 * -Pccp="9080" -Pcajp="9081"
 * 
 * Remote Tomcat
 * bash ./gradlew bootWar cargoRedeployRemote -Pcp="rTomcat"
 * -Pcrh="localhost" -Pccp="8088" -Pcru="admin" -Pcrp="admin" -Pcajp="9081"
 * 
 * Remote Wildfly
 * bash ./gradlew bootWar cargoRedeployRemote -Pcp="rWildfly"
 * -Pcrh="localhost" -Pccp="9990" -Pcru="admin" -Pcrp="admin"
 */

ext {
	remoteHost = project.hasProperty('crh') ? project.property('crh') : 'localhost'
	remoteUser = project.hasProperty('cru') ? project.property('cru') : 'admin'
	remotePassword = project.hasProperty('crp') ? project.property('crp') : 'admin'
}

//TODO : Switch cargo profile
if (project.hasProperty('cp')) {
	switch (project.property('cp')) {
		case 'rWildfly':
			apply from: 'gradle/cargo_remote_wildfly.gradle'
			break
		case 'rTomcat':
			apply from: 'gradle/cargo_remote_tomcat.gradle'
			break
		case 'ldTomcat':
			apply from: 'gradle/cargo_local_download_tomcat.gradle'
			break
		case 'leTomcat':
			apply from: 'gradle/cargo_local_embedded_tomcat.gradle'
			break
	}
}

//Cargo tasks (do build first):
// [Remote]
//  * cargoRedeployRemote
//  * cargoDeployRemote
//  * cargoUndeployRemote
// [Local]
//  * cargoRunLocal			//waits for the user to press CTRL + C to stop
//  * cargoConfigureLocal
// [Local] As container
//  * cargoStartLocal		//start container, deploy
//  * cargoRedeployLocal	//redeploy to running container
//  * cargoStopLocal		//stop container
cargo {
	/**
	 * TODO : Each war == each deployable block
	 */
	deployable {
		file = file("$buildDir/libs/build-cargo-embedded.war")
		context = 'build-cargo-embedded'
	}
}