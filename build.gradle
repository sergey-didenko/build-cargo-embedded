buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
	}
	repositories {
		mavenCentral()

		//Cargo
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

		//Cargo
		classpath 'com.bmuschko:gradle-cargo-plugin:2.6.1'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

//Cargo
apply plugin: 'com.bmuschko.cargo'
def cargoVersion = '1.7.3'

group = 'com.sergey.didenko.spring'
version = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildDir = 'build'
project.buildDir = "$buildDir"

repositories {
	mavenCentral()
}

configurations {
	providedRuntime

	//If deploy - exclude embedded tomcat from SpringBoot
	if (project.hasProperty('cp')) {
		implementation.exclude module: "spring-boot-starter-tomcat"
	}
}

dependencies {
	//[Spring] Web -> @RestController, @RequestMapping,...
	implementation('org.springframework.boot:spring-boot-starter-web')

	//[Spring] JPA Repository for DB
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

	//[Spring] Security
	//implementation('org.springframework.boot:spring-boot-starter-security')

    //[Spring] other modules
	//implementation('org.springframework.session:spring-session-core')
	//implementation('org.springframework.boot:spring-boot-starter-mail')
	//implementation('org.springframework.boot:spring-boot-starter-quartz')

	//[Spring] tools
	//compile "org.springframework.boot:spring-boot-devtools"
	//annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor")

	//[DB] JPA 2 generator
	annotationProcessor "org.hibernate:hibernate-jpamodelgen"
	
	//[DB] migration utils
	implementation('org.liquibase:liquibase-core')

	//[DB] MySQLConnector
	compile 'mysql:mysql-connector-java:8.0.13'

	//[DB] PostgreSQL
	//compile('org.postgresql:postgresql')

    //[Test] utils
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
	testCompile "junit:junit"

	//Cargo
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
	cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

wrapper {
	distributionUrl="https://services.gradle.org/distributions/gradle-5.0-all.zip"
}

//Cargo
apply from: 'gradle/cargo.gradle'

